# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/02_deepzoom.ipynb (unless otherwise specified).

__all__ = ['DeepZoomStore', 'upload', 'make_html', 'connect_b2_bucket', 'dzp_save', 'dzi_to_js',
           'list_names_and_js_urls', 'stack_image_json', 'make_multiviewer_jsonp', 'make_multiviewer_html',
           'dzp_thumbnail', 'ROOTDIR', 'VIEWERSDIR']

# Cell
import pyvips
import os
import shutil
import glob
import re
from bs4 import BeautifulSoup
import sys
import time
import b2sdk.v1 as b2
import numpy as np
import json
import requests

ROOTDIR = 'deepzoom'
VIEWERSDIR = 'viewers'

class DeepZoomStore:

    def __init__(self, application_key_id, application_key, bucket_name):
        ''''''

        # create local directory structure in current working directory
        store_dir = os.path.join('.', ROOTDIR)
        os.makedirs(store_dir, exist_ok=True)

        viewers_dir = os.path.join('.', ROOTDIR, VIEWERSDIR)
        os.makedirs(viewers_dir, exist_ok=True)

        # connect to b2 bucket
        self.application_key_id = application_key_id
        self.application_key = application_key
        self.bucket_name = bucket_name

        self.b2_api, self.base_url = connect_b2_bucket(application_key_id, application_key, bucket_name)

        # initialize image list
        self.images = []


    def make_deepzoom(self, fname):

        # convert to local deepzoom directory
        name = dzp_save(fname)
        self.images.append(name)

        # also make thumnail
        dzp_thumbnail(fname)

        dzi_to_js(name, self.base_url, self.bucket_name)
        make_html(name, self.bucket_name)


        # bit rough but just update for every added image
        viewer_name = 'overview'

        self.create_multiviewer(viewer_name, selection='all')


        # and sync new files to b2 bucket
        upload(self.b2_api, self.bucket_name)




    def create_multiviewer(self, viewer_name, selection='all'):

        print('Automatically updating b2 bucket to include all newly created images...')
        upload(self.b2_api, self.bucket_name)

        make_multiviewer_jsonp(viewer_name, self.application_key_id,
                               self.application_key, self.bucket_name,
                               selection=selection)

        # hard coded script src, need to make dynamic! But not today.
        make_multiviewer_html(viewer_name)

        print(f'Automatically uploading multiviewer files for: {viewer_name}...')

        upload(self.b2_api, self.bucket_name)

    def list_names(self):

        names, js_urls = list_names_and_js_urls(self.application_key_id, self.application_key, self.bucket_name)

        return names



def upload(b2_api, bucket_name):
    ''''''

    source = os.path.join('.', ROOTDIR)
    destination = f'b2://{bucket_name}/{ROOTDIR}'

    source = b2.parse_sync_folder(source, b2_api)
    destination = b2.parse_sync_folder(destination, b2_api)

    policies_manager = b2.ScanPoliciesManager(exclude_all_symlinks=True)

    synchronizer = b2.Synchronizer(
            max_workers=10,
            policies_manager=policies_manager,
            dry_run=False,
            allow_empty_source=True,
        )

    no_progress = False

    # need to run this to actually synchronize

    with b2.SyncReport(sys.stdout, no_progress) as reporter:
            synchronizer.sync_folders(
                source_folder=source,
                dest_folder=destination,
                now_millis=int(round(time.time() * 1000)),
                reporter=reporter,
            )




def make_html(name, bucket_name):

    html_fname = os.path.join('.', ROOTDIR, f'dzp_{name}', f'{name}_view.html')

    if not os.path.exists(html_fname):

        html = f'''
<!DOCTYPE html>
<html>
<body style="width: 800px; height: 600px; background-color: snow">

<div id="openseadragon1" style="width: 100%; height: 100%; background-color: gray"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/openseadragon/2.4.2/openseadragon.min.js"
        integrity="sha512-qvQYH6mPuE46uFcWLI8BdGaJpB5taX4lltbSIw5GF4iODh2xIgyz5ii1WpuzPFUknHCps0mi4mFGR44bjdZlZg=="
        crossorigin="anonymous">
</script>

<script type="text/javascript">
var viewer = OpenSeadragon({{
    id: "openseadragon1",
    prefixUrl: "https://cdnjs.cloudflare.com/ajax/libs/openseadragon/2.4.2/images/",
    tileSources: "{name}.dzi",
 }});
</script>


</body>
</html>
'''
        with open(html_fname, 'w') as fh:

            print(f'Saving: {html_fname}')
            fh.writelines(html)

    else:
        print(f'Not overwriting existing files: {html_fname}')




def connect_b2_bucket(application_key_id, application_key, bucket_name):
    '''Creates upload connection to your Backblaze b2 bucket.'''

    info = b2.InMemoryAccountInfo()
    b2_api = b2.B2Api(info)
    b2_api.authorize_account("production", application_key_id, application_key)


    bucket = b2_api.get_bucket_by_name(bucket_name)

    filenames = [file_info.file_name for file_info, _ in bucket.ls(show_versions=False, recursive=False)]
    urls = [b2_api.get_download_url_for_file_name(bucket_name, f) for f in filenames]
    base_url = re.split(bucket_name, urls[0])[0]

    return b2_api, base_url


def dzp_save(fname):
    # name = dzp_save(fname, report_tree=report_tree)

    name, ext = os.path.splitext(os.path.basename(fname))
    dzp_fname = os.path.join('.', ROOTDIR, f'dzp_{name}')
    dzi_fname = os.path.join('.', ROOTDIR, f'dzp_{name}', f'{name}.dzi')
    dzi_base = os.path.join('.', ROOTDIR, f'dzp_{name}', f'{name}')

    os.makedirs(dzp_fname, exist_ok=True)

    if not os.path.exists(dzi_fname):
        v_img = pyvips.Image.new_from_file(fname)
        v_img.dzsave(dzi_base)
    else:
        print(f'Not overwriting existing files: {dzi_base}')

    return name




def dzi_to_js(name, base_url, bucket_name):
    '''Parse XML.dzi file into JSONP.js file.

    '''

    url = f'{base_url}{bucket_name}/{ROOTDIR}/dzp_{name}/{name}_files/'
    dzi_fname = os.path.join('.', ROOTDIR, f'dzp_{name}', f'{name}.dzi')
    jsonp_fname = os.path.join('.', ROOTDIR, f'dzp_{name}', f'{name}.js')

    if not os.path.exists(jsonp_fname):

        with open(dzi_fname, 'r') as fh:
            lines = fh.read()

        soup = BeautifulSoup(lines, 'xml')

        Format = soup.Image.attrs['Format']
        Overlap = soup.Image.attrs['Overlap']
        TileSize = soup.Image.attrs['TileSize']
        Height = soup.Image.Size.attrs['Height']
        Width = soup.Image.Size.attrs['Width']

        jsonp = f'''OpenSeadragon(\
{{
"id": "{name}",
"prefixUrl": "https://cdnjs.cloudflare.com/ajax/libs/openseadragon/2.4.2/images/",
"tileSources": {{
    "Image": {{
       "xmlns":    "http://schemas.microsoft.com/deepzoom/2008",
       "Url":      "{url}",
       "Format": "{Format}",
       "Overlap": "{Overlap}",
       "TileSize": "{TileSize}",
       "Size": {{
           "Height": "{Height}",
           "Width": "{Width}"
        }}
    }}
}}
}});
'''

        with open(jsonp_fname, 'w') as fh:
            print(f'Saving: {jsonp_fname}')
            fh.writelines(jsonp)

    else:
        print(f'Not overwriting existing file: {jsonp_fname}')


def list_names_and_js_urls(application_key_id, application_key, bucket_name):

    # connect
    b2_api, base_url =connect_b2_bucket(application_key_id, application_key, bucket_name)
    bucket = b2_api.get_bucket_by_name(bucket_name)

    # list filenames in deepzoom bucket folder
    filenames = [file_info.file_name for file_info, _ in
                 bucket.ls(folder_to_list=ROOTDIR,
                           show_versions=False, recursive=False)]

    # extract names
    ptrn = f'{ROOTDIR}/dzp_(?P<name>[^/]+).*'

    names = []
    for f in filenames:
        m = re.match(ptrn, f)
        if m:
            names.append(m.groups()[0])

    # infer js urls
    js_urls = [f'{base_url}{bucket_name}/{ROOTDIR}/dzp_{n}/{n}.js' for n in names]

    return names, js_urls

def stack_image_json(js_urls):

    # download and parse .js files and append into multi tileSources string
    jsonp_strings = []

    ptrn = '.*"tileSources":(?P<tsources>.*)\s*\}\s*\);'
    repl = '\g<tsources>'

    for u in js_urls:
        # download jsonp.js file
        s = requests.get(u).content.decode()
        # extract tileSources substring
        s = re.sub(ptrn, repl, s, flags=re.DOTALL)
        # check valid json and improve formatting
        s = json.dumps(json.loads(s), indent=2)

        jsonp_strings.append(s)

    multi_tileSources = ',\n'.join(jsonp_strings)

    return multi_tileSources




def make_multiviewer_jsonp(viewer_name, application_key_id, application_key, bucket_name, selection='all'):
    '''Download all single image JSONP.js files and combine in multi-viewer.js '''

    # connect to bucket and list all deep zoom images
    names, js_urls = list_names_and_js_urls(application_key_id, application_key, bucket_name)

    # limit js_urls to selection
    if selection is not 'all':
        indices =  []
        for s in selection:
            if s in names:
                indices.append(names.index(s))
            else:
                print(f'Warning: Could not find image: {s}')

        js_urls = np.array(js_urls)[indices]

    # download jsonp and extract tile sources json
    multi_tileSources = stack_image_json(js_urls)



    # add openseadragon callback and viewer settings
    multi_jsonp = f'''OpenSeadragon( \
{{
"id": "{viewer_name}",
"prefixUrl": "https://cdnjs.cloudflare.com/ajax/libs/openseadragon/2.4.2/images/",
"tileSources": [{multi_tileSources}],
"sequenceMode": "true",
"preserveViewport": "false",
"showReferenceStrip": "true"
}});
'''

    # write to local multiviewer.js file
    multiviewer_fname = os.path.join('.', ROOTDIR, VIEWERSDIR, f'{viewer_name}.js')

    with open(multiviewer_fname, 'w') as fh:
        print(f'Saving: {multiviewer_fname}')
        fh.writelines(multi_jsonp)


def make_multiviewer_html(viewer_name):


    # need to make src attribute dynamic
    html_multiviewer_fname = os.path.join('.', ROOTDIR, VIEWERSDIR, f'{viewer_name}.html')

    #if not os.path.exists(html_multiviewer_fname):

    html = f'''
<!DOCTYPE html>
<html>
<body style="width: 800px; height: 600px; background-color: snow">

<script src="https://cdnjs.cloudflare.com/ajax/libs/openseadragon/2.4.2/openseadragon.min.js"
        integrity="sha512-qvQYH6mPuE46uFcWLI8BdGaJpB5taX4lltbSIw5GF4iODh2xIgyz5ii1WpuzPFUknHCps0mi4mFGR44bjdZlZg=="
        crossorigin="anonymous">
</script>
<div id="{viewer_name}" style="width: 800px; height: 400px; background-color: snow"></div>

<script src="https://f002.backblazeb2.com/file/dore-data/deepzoom/viewers/{viewer_name}.js?callback=OpenSeadragon"></script>

</body>
</html>
'''
    with open(html_multiviewer_fname, 'w') as fh:

        print(f'Saving: {html_multiviewer_fname}')
        fh.writelines(html)

    #else:
    #    print(f'Not overwriting existing files: {html_multiviewer_fname}')


def dzp_thumbnail(fname, tn_height=500):
    '''Creates thumbnail file in dzp_ directory'''

    # create directory if needed
    name, ext = os.path.splitext(os.path.basename(fname))
    dzp_fname = os.path.join('.', ROOTDIR, f'dzp_{name}')
    os.makedirs(dzp_fname, exist_ok=True)

    # construct standard thumbnail filename
    thumb_fname = os.path.join('.', ROOTDIR, f'dzp_{name}', f'tn_{name}.png')

    # resize
    tn_height = 500
    v_img = pyvips.Image.new_from_file(fname)
    scale = tn_height / v_img.height
    v_thumb = v_img.resize(scale)

    # write to file
    v_thumb.write_to_file(thumb_fname)